generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String
  firstName String
  lastName  String
  deathDate DateTime?

  familyCode String?

  fatherId String? @db.ObjectId
  motherId String? @db.ObjectId
  father   User?   @relation("FatherChildren", fields: [fatherId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mother   User?   @relation("MotherChildren", fields: [motherId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  childrenAsFather User[] @relation("FatherChildren")
  childrenAsMother User[] @relation("MotherChildren")

  relationshipsInitiated Relationship[] @relation("initiatedByUser")
  relationshipsTargeted  Relationship[] @relation("targetedUser")

  status    UserStatus @default(REGISTERED)
  badges    String[]   @default([])

  ownedPersonalTrees PersonalFamilyTree[] @relation("ownedByUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Relationship {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  type      String // Use o Enum RelationshipType do GraphQL aqui idealmente
  status    RelStatus @default(PENDING)

  initiatingUserId String @db.ObjectId
  initiatingUser   User   @relation("initiatedByUser", fields: [initiatingUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  targetUserId String @db.ObjectId
  targetUser   User   @relation("targetedUser", fields: [targetUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([initiatingUserId, targetUserId, type])
}

model PersonalFamilyTree {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  ownerId     String   @db.ObjectId
  owner       User     @relation("ownedByUser", fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  treeData    Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserStatus {
  REGISTERED
  PLACEHOLDER
  INVITED
}

enum RelStatus {
  PENDING
  CONFIRMED
  REJECTED
}
